import{_ as n,o as s,c as a,a as p}from"./app.9cfd3ebb.js";const m='{"title":"\u5404\u79CD\u5947\u602A\u7684\u7A0B\u5E8F\u5907\u4EFD","description":"","frontmatter":{"title":"\u5404\u79CD\u5947\u602A\u7684\u7A0B\u5E8F\u5907\u4EFD","date":"2022-04-13T22:00:00.000Z","tags":["c++"]},"headers":[{"level":2,"title":"\u519B\u5907\u7ADE\u8D5B\u4E4B c++ \u5B9E\u73B0 enumerate","slug":"\u519B\u5907\u7ADE\u8D5B\u4E4B-c-\u5B9E\u73B0-enumerate"},{"level":2,"title":"c++ \u81EA\u5E26\u7684\u7F16\u7801\u8F6C\u6362","slug":"c-\u81EA\u5E26\u7684\u7F16\u7801\u8F6C\u6362"}],"relativePath":"posts/xjb-utils.md"}',t={},e=p(`<h2 id="\u519B\u5907\u7ADE\u8D5B\u4E4B-c-\u5B9E\u73B0-enumerate" tabindex="-1">\u519B\u5907\u7ADE\u8D5B\u4E4B c++ \u5B9E\u73B0 enumerate <a class="header-anchor" href="#\u519B\u5907\u7ADE\u8D5B\u4E4B-c-\u5B9E\u73B0-enumerate" aria-hidden="true">#</a></h2><p>\u548C\u9524\u54E5\u7684\u4E00\u6B21\u519B\u5907\u7ADE\u8D5B\uFF0C\u5B9E\u73B0\u65B9\u6CD5\u6BD4\u8F83\u66B4\u529B\uFF0C\u4F46\u5C45\u7136\u8FD8\u633A\u597D\u7528</p><div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">enumerate</span> <span class="token punctuation">{</span>
   <span class="token keyword">private</span><span class="token operator">:</span>
    T<span class="token operator">&amp;</span> obj<span class="token punctuation">;</span>
    <span class="token keyword">using</span> iter_t <span class="token operator">=</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> item_t <span class="token operator">=</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token operator">*</span>obj<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">enumerate</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">obj</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">class</span> <span class="token class-name">iterator</span> <span class="token punctuation">{</span>
       <span class="token keyword">public</span><span class="token operator">:</span>
        size_t i<span class="token punctuation">;</span>
        iter_t iter<span class="token punctuation">;</span>
        <span class="token function">iterator</span><span class="token punctuation">(</span>iter_t iter<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">iter</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        iterator<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
            iter<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        pair<span class="token operator">&lt;</span>size_t<span class="token punctuation">,</span> item_t<span class="token operator">&gt;</span> <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>i<span class="token punctuation">,</span> <span class="token operator">*</span>iter<span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> iterator<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> iter <span class="token operator">!=</span> other<span class="token punctuation">.</span>iter<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">iterator</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> num<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token function">enumerate</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> words <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> word<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token function">enumerate</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span> <span class="token operator">&lt;&lt;</span> word <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><h2 id="c-\u81EA\u5E26\u7684\u7F16\u7801\u8F6C\u6362" tabindex="-1">c++ \u81EA\u5E26\u7684\u7F16\u7801\u8F6C\u6362 <a class="header-anchor" href="#c-\u81EA\u5E26\u7684\u7F16\u7801\u8F6C\u6362" aria-hidden="true">#</a></h2><p>\u653E\u5728\u8FD9\u91CC\u5907\u4EFD\u4E00\u4E0B \u5F53\u6A21\u677F\u4E86</p><div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;codecvt&gt;</span>  <span class="token comment">// for std::codecvt_utf8</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;locale&gt;</span>   <span class="token comment">// for std::wstring_convert</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>
    <span class="token function">SetConsoleOutputCP</span><span class="token punctuation">(</span><span class="token number">65001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    std<span class="token double-colon punctuation">::</span>wstring_convert<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>codecvt_utf8<span class="token operator">&lt;</span><span class="token keyword">char32_t</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">char32_t</span><span class="token operator">&gt;</span> u32conv<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string u8string <span class="token operator">=</span> <span class="token string">&quot;\u4F60\u597D\u4E16\u754C&quot;</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>u32string unicode_string <span class="token operator">=</span> u32conv<span class="token punctuation">.</span><span class="token function">from_bytes</span><span class="token punctuation">(</span>u8string<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string u8string2 <span class="token operator">=</span> u32conv<span class="token punctuation">.</span><span class="token function">to_bytes</span><span class="token punctuation">(</span>unicode_string<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> c <span class="token operator">:</span> unicode_string<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%x &quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> u8string2<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>`,6),o=[e];function c(l,r,u,i,k,b){return s(),a("div",null,o)}var y=n(t,[["render",c]]);export{m as __pageData,y as default};
